/*
 *	MIPS IV Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2016, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

include "nmp/config.nmp"
include "nmp/state.nmp"
include "nmp/macros.nmp"

// GLISS configuration
let proc = "riscv"         
let bit_order = "uppermost"
let gliss_isize = "32"
//let bit_image_order =  1


// modes
mode reg_t (r: index) = r
	num = r
	syntax =
		switch ( r ) {
		case  0:	"zero"
		case  1:	"ra"
		case  2: 	"sp"
		case  3: 	"gp"
		case  4: 	"tp"
		case  5: 	"t0"
		case  6: 	"t1"
		case  7: 	"t2"
		case  8:	"fp"
		case  9:	"s1"
		case 10:	"a0"
		case 11:	"a1"
		case 12:	"a2"
		case 13:	"a3"
		case 14:	"a4"
		case 15:	"a5"
		case 16:	"a6"
		case 17:	"a7"
		case 18:	"s2"
		case 19:	"s3"
		case 20:	"s4"
		case 21:	"s5"
		case 22:	"s6"
		case 23:	"s7"
		case 24:	"s8"
		case 25:	"s9"
		case 26:	"s10"
		case 27:	"s11"
		case 28:	"t3"
		case 29:	"t4"
		case 30:	"t5"
		case 31:	"t6"
		}
	image  = format ( "%5b", r )
macro setR(d, v) = if d != 0 then R[d] = v; endif 

mode IMM16(n: half) = n
	syntax = format("#%d", n)
	image = format("%16b", n)

mode UIMM16(n: uhalf) = n
   syntax = format ( "#%d", n )
   image  = format ( "%16b", n )



// top-level instructions
op instruction (x: allinstr)
	syntax = x.syntax
	image = x.image
	action = {
		NPC = PC + 4;
		x.action;
		PC = NPC;
	}

op allinstr =
	  all_rrr
	| all_rri
	| all_alu
	| all_branch
	| all_special
//	| all_muldiv
//	| all_dshift
	| all_load
	| all_stores

op init ()
	action = {
		R[0] = 0;
	}

include "nmp/alu.nmp"
include "nmp/control.nmp"
include "nmp/special.nmp"
include "nmp/mem.nmp"
