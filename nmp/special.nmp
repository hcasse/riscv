/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

op all_special =
	  fence
	| syscall


// special instruction
// several values are currently ignored -> they are reserved for finer-grain fences in future extensions of RISC-V ISA
op fence(predecessor: card(4), successor: card(4), ignore1: card(4), ignore2: reg_t, fencetype: card(3), ignore3: reg_t)
	syntax = if fencetype == 1 then "fence.i" else format("fence %4b, %4b", predecessor, successor) endif
	image  = format("%4b %4b %4b %5b %3b %5b 0001111", ignore1, predecessor, successor, ignore2, fencetype, ignore3)
	action = {
		SyncOperation(0);
	}

// because syscalls and csr instructions share same opcode, they are all encoded here
// at the csr instructions, only rough differentiation between csr and csri
op syscall(srcdest: card(12), source: reg_t, funct: card(3), dest: reg_t) 
	syntax = 
		if funct == 0 && srcdest == 0
		then "ecall" else if funct == 0 && srcdest == 1
		then "ebreak" else if funct > 3
		then format("csri %s, %s %l", dest, source, srcdest)
		else format("csr %s, %s %l", dest, source, srcdest)
		endif endif endif
	image  = format("%12b %s %3b %s 1110011", srcdest, source, funct, dest)
	action = {
		if funct == 0 && srcdest == 0
		then SignalException(SystemCall); else if funct == 0 && srcdest == 1
		then SignalException(BreakPoint);
		else SignalException(Trap);
		endif; endif;
	}