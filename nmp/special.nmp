/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

op all_special =
	  fence
	| ecall
	| ebreak
	| csrrw
	| csrrs
	| csrrc
	| csrrwi
	| csrrsi
	| csrrci
	| rcmc1
	| rcmc2
	| rcmc3
	| rcmc4
	| rcmc5
	| rcmc6


// special instruction
// several values are currently ignored -> they are reserved for finer-grain fences in future extensions of RISC-V ISA
op fence(predecessor: card(4), successor: card(4), ignore1: card(4), ignore2: reg_t, fencetype: card(3), ignore3: reg_t)
	syntax = if fencetype == 1 then "fence.i" else format("fence %4b, %4b", predecessor, successor) endif
	image  = format("%4b %4b %4b %5b %3b %5b 0001111", ignore1, predecessor, successor, ignore2, fencetype, ignore3)
	action = {
		SyncOperation(0);
	}

// because syscalls and csr instructions share same opcode, they are all encoded here
// at the csr instructions, only rough differentiation between csr and csri
op ecall() 
	syntax = "ecall"
	image  = "000000000000 00000 000 00000 1110011"
	action = {
		SignalException(SystemCall); 
	}

op ebreak() 
	syntax = "ebreak"
	image  = "000000000001 00000 000 00000 1110011"
	action = {
		SignalException(BreakPoint); 
	}

op csrrw(srcdest: card(12), source: reg_t, dest: reg_t) 
	syntax = format("csrrw %s, %d, %s", dest, srcdest, source)
	image  = format("%12b %s 001 %s 1110011", srcdest, source, dest)
	action = {
		SignalException(Trap);
	}

op csrrs(srcdest: card(12), source: reg_t, dest: reg_t) 
	syntax = format("csrrs %s, %d, %s", dest, srcdest, source)
	image  = format("%12b %s 010 %s 1110011", srcdest, source, dest)
	action = {
		SignalException(Trap);
	}

op csrrc(srcdest: card(12), source: reg_t, dest: reg_t) 
	syntax = format("csrrc %s, %d, %s", dest, srcdest, source)
	image  = format("%12b %s 011 %s 1110011", srcdest, source, dest)
	action = {
		SignalException(Trap);
	}

op csrrwi(srcdest: card(12), zimm: card(5), dest: reg_t) 
	syntax = format("csrrwi %s, %d, %d", dest, srcdest, zimm)
	image  = format("%12b %5b 101 %s 1110011", srcdest, zimm, dest)
	action = {
		SignalException(Trap);
	}

op csrrsi(srcdest: card(12), zimm: card(5), dest: reg_t) 
	syntax = format("csrrsi %s, %d, %d", dest, srcdest, zimm)
	image  = format("%12b %5b 110 %s 1110011", srcdest, zimm, dest)
	action = {
		SignalException(Trap);
	}

op csrrci(srcdest: card(12), zimm: card(5), dest: reg_t) 
	syntax = format("csrrci %s, %d, %d", dest, srcdest, zimm)
	image  = format("%12b %5b 111 %s 1110011", srcdest, zimm, dest)
	action = {
		SignalException(Trap);
	}

// RC/MC custom instructions
// remove these lines when not working with the RC/MC architecture
op rcmc1(src2: reg_t, src1: reg_t)
	syntax = format("rcmc-s %s, %s", src1, src2)
	image  = format("0000000 %s %s 000 00000 1101011", src2, src1)
	action = {
		// empty, no simulation
	}

op rcmc2(offset: int(12), src: reg_t, dest: reg_t)
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax = format("rcmc-r %s, %s, %l", dest, src, __IADDR + tgt_offset)
	image  = format("%12b %s 100 %s 1101011", offset, src, dest)
	action = {
		// empty, no simulation
	}

op rcmc3(offset: int(12), src: reg_t, dest: reg_t)
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax = format("rcmc-c %s, %s, %l", dest, src, __IADDR + tgt_offset)
	image  = format("%12b %s 001 %s 1101011", offset, src, dest)
	action = {
		// empty, no simulation
	}

op rcmc4(offset: int(12), src: reg_t, dest: reg_t)
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax = format("rcmc-p %s, %s, %l", dest, src, __IADDR + tgt_offset)
	image  = format("%12b %s 101 %s 1101011", offset, src, dest)
	action = {
		// empty, no simulation
	}

op rcmc5(offset: int(12), src: reg_t, dest: reg_t)
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax = format("rcmc-a %s, %s, %l", dest, src, __IADDR + tgt_offset)
	image  = format("%12b %s 111 %s 1101011", offset, src, dest)
	action = {
		// empty, no simulation
	}

op rcmc6(offset: int(12), src: reg_t, dest: reg_t)
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax = format("rcmc-b %s, %s, %l", dest, src, __IADDR + tgt_offset)
	image  = format("%12b %s 110 %s 1101011", offset, src, dest)
	action = {
		// empty, no simulation
	}
