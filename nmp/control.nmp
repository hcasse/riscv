/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// branches
op all_branch = 
	  beq
	| bge
	//| bgeu	// TODO
	| blt
	//| bltu	// TODO
	| bne
	| jal
	| jalr

//TODO: implement bltu + bgeu

// branch instructions
op beq(src2: reg_t, src1: reg_t, offset: int(12))
	syntax =
		if src1 == 0 || src2 == 0
		then format("beqz %l", __IADDR + 4 + coerce(int(30), offset :: 0<0..0>))
		else format("beq %s, %s, %l", src1, src2, __IADDR + 4 + ((coerce(int(31), offset) :: 0<0..0>)))
		endif
	image = format("%1b %6b %s %s 000 %4b %1b 1100011", offset<12..12>, offset<10..5>, src2, src1, offset<4..1>, offset<11..11>)
	action = {
		let tgt_offset = coerce(int(31), offset) :: 0<0..0>;
		let condition = R[src1] == R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op bne(src2: reg_t, src1: reg_t, offset: int(12))
	syntax =
		if src1 == 0 || src2 == 0
		then format("bnez %l", __IADDR + 4 + ((coerce(int(30), offset) :: 0<0..0>)))
		else format("bne %s, %s, %l", src1, src2, __IADDR + 4 + ((coerce(int(31), offset) :: 0<0..0>)))
		endif
	image = format("%1b %6b %s %s 001 %4b %1b 1100011", offset<12..12>, offset<10..5>, src2, src1, offset<4..1>, offset<11..11>)
	action = {
		let tgt_offset = coerce(int(31), offset) :: 0<0..0>;
		let condition = R[src1] != R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op blt(src2: reg_t, src1: reg_t, offset: int(12))
	syntax =
		if src1 == 0
		then format("bltz %s, %l", src2, __IADDR + 4 + ((coerce(int(30), offset) :: 0<0..0>)))
		else if src2 == 0
		then format("bgtz %s, %l", src1, __IADDR + 4 + ((coerce(int(30), offset) :: 0<0..0>)))
		else format("blt %s, %s, %l", src1, src2, __IADDR + 4 + ((coerce(int(31), offset) :: 0<0..0>)))
		endif endif
	image = format("%1b %6b %s %s 100 %4b %1b 1100011", offset<12..12>, offset<10..5>, src2, src1, offset<4..1>, offset<11..11>)
	action = {
		let tgt_offset = coerce(int(31), offset) :: 0<0..0>;
		let condition = R[src1] < R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op bge(src2: reg_t, src1: reg_t, offset: int(12))
	syntax =
		if src1 == 0
		then format("bgez %s, %l", src2, __IADDR + 4 + ((coerce(int(30), offset) :: 0<0..0>)))
		else if src2 == 0
		then format("bgez %s, %l", src1, __IADDR + 4 + ((coerce(int(30), offset) :: 0<0..0>)))
		else format("bge %s, %s, %l", src1, src2, __IADDR + 4 + ((coerce(int(31), offset) :: 0<0..0>)))
		endif endif
	image = format("%1b %6b %s %s 101 %4b %1b 1100011", offset<12..12>, offset<10..5>, src2, src1, offset<4..1>, offset<11..11>)
	action = {
		let tgt_offset = coerce(int(31), offset) :: 0<0..0>;
		let condition = R[src1] >= R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op jal(offset: int(20), dest: reg_t)
	syntax = 
		if dest == 0
		then format("j %d", __IADDR + 4 + (coerce(int(31), offset) :: 0<0..0>))
		else if dest == 1
		then format("jal %d", __IADDR + 4 + (coerce(int(31), offset) :: 0<0..0>))
		else format("jal %s, %d", dest, __IADDR + 4 + (coerce(int(31), offset) :: 0<0..0>))
		endif endif
	image = format("%1b %10b %1b %8b %s 1101111", offset<20..20>, offset<10..1>, offset<11..11>, offset<19..12>, dest)
	action = {
		if dest != 0 then R[dest] = PC + 4; endif;
		let tgt_offset = coerce(int(31), offset) :: 0<0..0>;
		NPC = NPC + tgt_offset;
	}

op jalr(offset: int(12), base: reg_t, dest: reg_t)
	syntax = 
		if dest == 1
		then format("jalr %s", base)
		else if dest == 0 && offset == 0 && base == 1
		then "ret"
		else if dest == 0 && offset == 0 && base != 1
		then format("jr %s", base)
		else format("jalr %s, %s, %d", dest, base, __IADDR + 4 + (coerce(int(31), offset) :: 0<0..0>))
		endif endif endif
	image = format("%12b %s 000 %s 1100111", offset, base, dest)
	action = {
		if dest != 0 then R[dest] = PC + 4; endif;
		let tgt_offset = coerce(int(31), offset) :: 0<0..0>;
		NPC = NPC + tgt_offset + base;
	}

