/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// branches
op all_branch = 
	  beq
	| bge
	| bgeu
	| blt
	| bltu
	| bne
	| jal
	| jalr

// branch instructions
op beq(src2: reg_t, src1: reg_t, offset: int(12))
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax =
		if src1 == 0
		then format("beqz %s, %l", src2, __IADDR + tgt_offset)
		else if src2 == 0
		then format("beqz %s, %l", src1, __IADDR + tgt_offset)
		else format("beq %s, %s, %l", src1, src2, __IADDR + tgt_offset)
		endif endif
	image = format("%1b %6b %s %s 000 %4b %1b 1100011", offset<11..11>, offset<9..4>, src2, src1, offset<3..0>, offset<10..10>)
	action = {
		let condition = R[src1] == R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op bne(src2: reg_t, src1: reg_t, offset: int(12))
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax =
		if src1 == 0
		then format("bnez %s, %l", src2, __IADDR + tgt_offset)
		else if src2 == 0
		then format("bnez %s, %l", src1, __IADDR + tgt_offset)
		else format("bne %s, %s, %l", src1, src2, __IADDR + tgt_offset)
		endif endif
	image = format("%1b %6b %s %s 001 %4b %1b 1100011", offset<11..11>, offset<9..4>, src2, src1, offset<3..0>, offset<10..10>)
	action = {
		let condition = R[src1] != R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op blt(src2: reg_t, src1: reg_t, offset: int(12))
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax =
		if src1 == 0
		then format("bltz %s, %l", src2, __IADDR + tgt_offset)
		else if src2 == 0
		then format("bgtz %s, %l", src1, __IADDR + tgt_offset)
		else format("blt %s, %s, %l", src1, src2, __IADDR + tgt_offset)
		endif endif
	image = format("%1b %6b %s %s 100 %4b %1b 1100011", offset<11..11>, offset<9..4>, src2, src1, offset<3..0>, offset<10..10>)
	action = {
		let condition = R[src1] < R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op bltu(src2: reg_t, src1: reg_t, offset: int(12))
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax = format("bltu %s, %s, %l", src1, src2, __IADDR + tgt_offset)
	image = format("%1b %6b %s %s 110 %4b %1b 1100011", offset<11..11>, offset<9..4>, src2, src1, offset<3..0>, offset<10..10>)
	action = {
		let condition = coerce(card(32), R[src1]) < coerce(card(32), R[src2]);
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op bge(src2: reg_t, src1: reg_t, offset: int(12))
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax =
		if src1 == 0
		then format("bgez %s, %l", src2, __IADDR + tgt_offset)
		else if src2 == 0
		then format("bgez %s, %l", src1, __IADDR + tgt_offset)
		else format("bge %s, %s, %l", src1, src2, __IADDR + tgt_offset)
		endif endif
	image = format("%1b %6b %s %s 101 %4b %1b 1100011", offset<11..11>, offset<9..4>, src2, src1, offset<3..0>, offset<10..10>)
	action = {
		let condition = R[src1] >= R[src2];
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op bgeu(src2: reg_t, src1: reg_t, offset: int(12))
	tgt_offset = coerce(int(13), offset :: 0<0..0>)
	syntax =
		format("bgeu %s, %s, %l", src1, src2, __IADDR + tgt_offset)
	image = format("%1b %6b %s %s 111 %4b %1b 1100011", offset<11..11>, offset<9..4>, src2, src1, offset<3..0>, offset<10..10>)
	action = {
		let condition = coerce(card(32), R[src1]) >= coerce(card(32), R[src2]);
		if condition then
			NPC = NPC + tgt_offset;
		endif;
	}

op jal(offset: int(20), dest: reg_t)
	tgt_offset = coerce(int(32), offset :: 0<0..0>)
	syntax = 
		if dest == 0
		then format("j %l", __IADDR + tgt_offset)
		else if dest == 1
		then format("jal %l", __IADDR + tgt_offset)
		else format("jal %s, %l", dest, __IADDR + tgt_offset)
		endif endif
	image = format("%1b %10b %1b %8b %s 1101111", offset<19..19>, offset<9..0>, offset<10..10>, offset<18..11>, dest)
	action = {
		if dest != 0 then R[dest] = PC + 4; endif;
		NPC = NPC + tgt_offset;
	}

op jalr(offset: int(12), base: reg_t, dest: reg_t)
	syntax = 
		if dest == 1
		then format("jalr %s", base)
		else if dest == 0 && offset == 0 && base == 1
		then "ret"
		else if dest == 0 && offset == 0 && base != 1
		then format("jr %s", base)
		else format("jalr %s, %s, %l", dest, base, __IADDR + coerce(int(32), offset))
		endif endif endif
	image = format("%12b %s 000 %s 1100111", offset, base, dest)
	action = {
		if dest != 0 then R[dest] = PC + 4; endif;
		let tgt_offset = coerce(int(32), offset);
		NPC = NPC + tgt_offset + R[base];
	}

